#!/usr/bin/env bash
#
# An hook script to check the commit log message.
# Called by "git commit" with one argument, the name of the file
# that has the commit message. The hook should exit with non-zero
# status after issuing an appropriate message if it wants to stop the
# commit. The hook is allowed to edit the commit message file.
#
# - To enable this hook, rename this file to "commit-msg".

# The file that has the commit message
COMMIT_MSG_FILE="$1"

# The project source directory, abs path
GIT_REPO_DIR="$(git rev-parse --show-toplevel)"

# The policy directory, abs path
THIS_DIR="$(cd $(dirname $0); pwd; cd - > /dev/null)"
POLICY_DIR="${THIS_DIR}/policy"
source "${POLICY_DIR}/utils.sh"

function backup_msg_exit()
{
    local msg=$(cat ${COMMIT_MSG_FILE})

    if [ -z "${msg}" ] ; then
        exit 1
    fi

    local ctrl_wip=$(git ls-files ${GIT_REPO_DIR}/wip)
    if [ ! -z "${ctrl_wip}" ]; then
        exit 1 # wip/ is under git control, skip
    fi

    local wip_dir="${GIT_REPO_DIR}/wip"
    local tmp_file="${wip_dir}/commit-msg.cache"
    local usr_msg=$(grep "^[^#]" "${COMMIT_MSG_FILE}")

    if [ "${usr_msg}" == "" ]; then
        exit 1 # nothing to cached
    fi

    if [ ! -d "${wip_dir}" ]; then mkdir "${wip_dir}"; fi
    echo "${usr_msg}" > ${tmp_file}

    local head_1_msg=$(head -n1 ${tmp_file})
    local tail_1_msg=$(tail -n1 ${tmp_file})
    if [ "${head_1_msg}" = "${tail_1_msg}" ]; then
        usr_msg=$(grep "^Signed-off-by: .*" "${tmp_file}")
        if [ "${usr_msg}" != "" ]; then
            # only signed off line, remove it
            rm ${tmp_file}
            exit 1
        fi
    fi

    echo "Cached commit message: $(msgBrown ${tmp_file})"
    exit 1
}

# check the signed off
${POLICY_DIR}/check-signed-off-by.sh "${COMMIT_MSG_FILE}"
if [ ! $? -eq 0 ] ; then backup_msg_exit; fi

# check the commit message format
${POLICY_DIR}/check-msg-fmt.sh "${COMMIT_MSG_FILE}"
if [ ! $? -eq 0 ] ; then backup_msg_exit; fi

# check the commit message spell
#${POLICY_DIR}/check-spell.sh $1
#if [ ! $? -eq 0 ] ; then backup_msg_exit; fi

# all pass continue
exit

# debug usage
echo "[GitHookDebug] commit-msg => pass"
exit 1
