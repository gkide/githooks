#!/usr/bin/env bash

REPO_HOOKS_VERSION="v0.0.1-rc.0";
# https://github.com/gkide/repo-hooks

# Exit the script if any statement returns a non-true return value
set -e
# Show error if used undefined variable
set -u
# Pipe fail if any one of the pipe command failed
set -o pipefail

# Current directory of full path with symbolic link resolved
THIS_DIR="$(realpath ${0%/*})";

# Import normal shell function-util
# - IS_DEBUG_MODE=true;
# - IS_VERBOSE_MODE=true;
source ${THIS_DIR}/utils.sh;
IS_DEBUG_MODE=false;
__SKIP_ALL_MSG=false;

_sed=$([ "$(uname)" = "Darwin" ] && echo "sed -E" || echo "sed -r");

# User repo info config if not set then use the default
USR_CONFIG="";

for item in $*; do
    if [ "0" = "$#" ]; then
        break;
    fi

    KEY=$(echo ${item} | sed "s/\([a-zA-Z]*\)=\([a-zA-Z0-9\/\._-]*\)/\1/g");
    VAL=$(echo ${item} | sed "s/\([a-zA-Z]*\)=\([a-zA-Z0-9\/\._-]*\)/\2/g");
    # infoMsg "$# [$item] => [$KEY], [$VAL]";

    [ "$KEY" = "" -o "$KEY" = "${item}" ] && break;
    [ "$VAL" = "" -o "$VAL" = "${item}" ] && break;

    if [ "CONFIG" = "$KEY" ]; then
        USR_CONFIG="$VAL";
        continue;
    fi

    if [ "TESTING" = "$KEY" ]; then
        __SKIP_ALL_MSG=$VAL;
        continue;
    fi
done

# If true, utils functions keep quiet
SKIP_ALL_MSG=$__SKIP_ALL_MSG;

# Repo config not set, use the default of current working directory
if [ "${USR_CONFIG}" = "" ]; then
    USR_CONFIG=.sync-repo-info.sh
fi

if [ ! -f "${USR_CONFIG}" ]; then
    infoMsg "Usage: ${0##*/} [CONFIG=config] [TESTING=true]";
    errMsg "Repo info config do not exits $(keyMsg ${PWD}/${USR_CONFIG})";
fi

# User configuration
# - REPO_DIR
# - REPO_VCS
# - VS_VFILE
source ${USR_CONFIG};
USR_CONFIG=$(realpath -s ${USR_CONFIG}); # don't expand symlinks

# Change to user repo directory
if [ ! -d ${REPO_DIR} ]; then
    errMsg "Do not exits repo $(keyMsg ${REPO_DIR})";
fi
cd ${REPO_DIR}
REPO_DIR=$(realpath -s ${REPO_DIR}); # don't expand symlinks

# Checking is GIT or SVN
VCS="$(getSupportedVCS $REPO_VCS)";
[ "${VCS}" = "SVN" -a ! -d ${PWD}/.svn ] \
    && errMsg "Repo is not $(keyMsg SVN)";
[ "${VCS}" = "GIT" -a ! -d ${PWD}/.git ] \
    && errMsg "Repo is not $(keyMsg GIT)";

# Repo info file to sync
if [ ! -f ${VS_VFILE} ]; then
    errMsg "Do not exits repo info $(keyMsg ${VS_VFILE})";
fi

# The repo info & config file should be one file of the repo subdirectory
fullPath=$(realpath -s ${VS_VFILE}); # don't expand symlinks
isRepoFile=${fullPath#${REPO_DIR}/}; # remove '${REPO_DIR}/'
if [ "${isRepoFile}" = "${fullPath}" ]; then
    errMsg "$(keyMsg ${VCS}): $(valMsg ${fullPath}) NOT in the repo
       $(keyMsg ${REPO_DIR})";
fi
VS_VFILE=${REPO_DIR}/${isRepoFile};

fullPath=$(realpath -s ${USR_CONFIG}); # don't expand symlinks
isRepoFile=${fullPath#${REPO_DIR}/}; # remove '${REPO_DIR}/'
if [ "${isRepoFile}" = "${fullPath}" ]; then
    errMsg "$(keyMsg ${VCS}): $(valMsg ${fullPath}) NOT in the repo
       $(keyMsg ${REPO_DIR})";
fi
USR_CONFIG=${REPO_DIR}/${isRepoFile};

# Get SVN repo info
[ "${VCS}" = "SVN" ] && {
    # REPO_URL=$(svn info | grep "Repository Root:" | awk '{ print $3; }')
    REPO_URL=$(svn info | grep "URL:" | head -n 1 | awk '{ print $2; }')
    REPO_HASH=$(svn info | grep "Revision:" | awk '{ print $2; }')

    __REPO_DIR=$(svn info | grep "Working Copy Root Path:" | awk '{ print $5; }')
    REPO_SUB_DIR=$(svn info | grep "Relative URL:" \
        | awk 'sub(/\^\//,"",$3) sub(/\^\\/,"",$3) { print $3; }')
    [ -z "${REPO_SUB_DIR}" ] && REPO_SUB_DIR="$PWD"
    SVN_SUB_HASH=$(svn info | grep "Last Changed Rev:" | awk '{ print $4; }')

    if [ "${REPO_HASH}" != "${SVN_SUB_HASH}" ]; then
        REPO_HASH="${REPO_HASH}.${SVN_SUB_HASH}"
    fi

    REPO_MODIFY_TIME=$(svn info | grep "Last Changed Date:" \
        | awk '{ print $4, $5, $6; }')

    __USER_EMAIL="" # SVN should config by hand
    SVN_LOGMSG=$(svn log)
    SVN_LOGMSG=$(echo "${SVN_LOGMSG}" | head -n 2 | tail -n 1)
    __USER_NAME=$(echo "${SVN_LOGMSG}" | awk -F'|' 'gsub(/ /,"",$2) { print $2; }')
}

# Get GIT repo info
[ "${VCS}" = "GIT" ] && {
    __USER_NAME="$(git config user.name)"
    __USER_EMAIL="$(git config user.email)"

    if [ "$(git remote -v)" = "" ]; then
        REPO_URL="" # remote url is not set
    else
        REPO_URL=$(git remote -v | head -n 1 | awk '{ print $2; }')
    fi

    REPO_SUB_DIR="$PWD"
    __REPO_DIR=$(git rev-parse --show-toplevel)
    REPO_SUB_DIR="${REPO_SUB_DIR##${__REPO_DIR}}"
    [ -z "${REPO_SUB_DIR}" ] && REPO_SUB_DIR="${__REPO_DIR}"

    REPO_HASH=$(git log --oneline -1 | awk '{ print $1; }')
    REPO_MODIFY_TIME=$(git log -1 --date=iso8601 | grep "Date:" \
        | awk '{ print $2, $3, $4; }')
}

[ "${__REPO_DIR}" != "${REPO_DIR}" ] \
    && errMsg "Repo directory not equal
    USER: $(valMsg ${REPO_DIR})
    AUTO: $(keyMsg ${__REPO_DIR})"

# If not defined, then use the value auto detected, otherwise just use it
isDefined="$(echo ${USER_NAME-NotDefine})"
[ "${isDefined}" = "NotDefine" ] && USER_NAME="${__USER_NAME}"
isDefined="$(echo ${USER_EMAIL-NotDefine})"
[ "${isDefined}" = "NotDefine" ] && USER_EMAIL="${__USER_EMAIL}"

HOST_USER="$(getHostUser)";
HOST_NAME="$(getHostName)";
HOST_OSNV="$(getHostOSNV)";

BUILD_TIME="$(getBuildTime)";
BUILD_USER="${USER_NAME} <${USER_EMAIL}>";

infoMsg "----------------------------------------------------------------";
infoMsg "$(keyMsg ${VCS}): Config: $(valMsg ${USR_CONFIG})";
infoMsg "$(keyMsg ${VCS}): RepoInfo: $(valMsg ${VS_VFILE})";
infoMsg "----------------------------------------------------------------";
infoMsg "$(keyMsg ${VCS}): Build host: $(valMsg ${HOST_USER})@$(valMsg ${HOST_NAME}) is $(valMsg ${HOST_OSNV})";
infoMsg "----------------------------------------------------------------";
infoMsg "$(keyMsg ${VCS}): Build By: $(valMsg ${BUILD_USER})";
infoMsg "$(keyMsg ${VCS}): Build Time: $(valMsg ${BUILD_TIME})";
infoMsg "----------------------------------------------------------------";
infoMsg "$(keyMsg ${VCS}): Remote URL: $(valMsg ${REPO_URL})";
infoMsg "$(keyMsg ${VCS}): Local Repo: $(valMsg ${REPO_DIR})";
infoMsg "$(keyMsg ${VCS}): Working Path: $(valMsg ${REPO_SUB_DIR})";
infoMsg "----------------------------------------------------------------";
infoMsg "$(keyMsg ${VCS}): Repo Commit Hash: $(valMsg ${REPO_HASH})";
infoMsg "$(keyMsg ${VCS}): Repo Last Modify Time: $(valMsg ${REPO_MODIFY_TIME})";
infoMsg "----------------------------------------------------------------";

# Escape meta-char for RegExp
#   (   =>  \(
# space =>  \s+
_VS_REPO_URL_=$(echo "${VS_REPO_URL}" \
    | awk -F';' 'sub(/\(/,"\(",$1) gsub(/ /,"\s+",$1) gsub(/\*/,"\*",$1) gsub(/\[/,"\[",$1) gsub(/\]/,"\]",$1) { print $1; }');
_VS_REPO_HASH_=$(echo "${VS_REPO_HASH}" \
    | awk -F';' 'sub(/\(/,"\(",$1) gsub(/ /,"\s+",$1) gsub(/\*/,"\*",$1) gsub(/\[/,"\[",$1) gsub(/\]/,"\]",$1) { print $1; }');

_VS_MODIFY_TIME_=$(echo "${VS_MODIFY_TIME}" \
    | awk -F';' 'sub(/\(/,"\(",$1) gsub(/ /,"\s+",$1) gsub(/\*/,"\*",$1) gsub(/\[/,"\[",$1) gsub(/\]/,"\]",$1) { print $1; }');

_VS_BUILD_USER_=$(echo "${VS_BUILD_USER}" \
    | awk -F';' 'sub(/\(/,"\(",$1) gsub(/ /,"\s+",$1) gsub(/\*/,"\*",$1) gsub(/\[/,"\[",$1) gsub(/\]/,"\]",$1) { print $1; }');
_VS_BUILD_TIME_=$(echo "${VS_BUILD_TIME}" \
    | awk -F';' 'sub(/\(/,"\(",$1) gsub(/ /,"\s+",$1) gsub(/\*/,"\*",$1) gsub(/\[/,"\[",$1) gsub(/\]/,"\]",$1) { print $1; }');

_VS_HOST_NAME_=$(echo "${VS_HOST_NAME}" \
    | awk -F';' 'sub(/\(/,"\(",$1) gsub(/ /,"\s+",$1) gsub(/\*/,"\*",$1) gsub(/\[/,"\[",$1) gsub(/\]/,"\]",$1) { print $1; }');
_VS_HOST_USER_=$(echo "${VS_HOST_USER}" \
    | awk -F';' 'sub(/\(/,"\(",$1) gsub(/ /,"\s+",$1) gsub(/\*/,"\*",$1) gsub(/\[/,"\[",$1) gsub(/\]/,"\]",$1) { print $1; }');
_VS_HOST_OSNV_=$(echo "${VS_HOST_OSNV}" \
    | awk -F';' 'sub(/\(/,"\(",$1) gsub(/ /,"\s+",$1) gsub(/\*/,"\*",$1) gsub(/\[/,"\[",$1) gsub(/\]/,"\]",$1) { print $1; }');

# RegExp Pattern: URL
_REPO_URL_=$(echo "${REPO_URL}" \
    | awk 'gsub(/\\/,"\\\\\\",$1) gsub(/\//,"\/",$1) gsub(/\./,"\.",$1) \
           gsub(/\-/,"\-",$1) gsub(/\:/,"\:",$1) { print $1; }');
URL_A="((http:\/\/)|(https:\/\/)|(svn:\/\/)|(git@))"
URL_B="[0-9A-Za-z_@:\\\\\/\.-]+"
REGEXP_REPO_URL="^(${_VS_REPO_URL_}\s+\\\")(${URL_A}${URL_B})(\\\"\s*.*)$";
debugMsg "$(keyMsg ${VCS}): RegExp: RepoUrl: $(valMsg ${REGEXP_REPO_URL})";
${_sed} -i.bk "s/${REGEXP_REPO_URL}/\1${_REPO_URL_}\8/" ${VS_VFILE};

# RegExp Pattern: Hash
REGEXP_REPO_HASH="^(${_VS_REPO_HASH_}\s+\\\"*)([0-9a-z\.]+)(\\\"*\s*.*)$";
debugMsg "$(keyMsg ${VCS}): RegExp: RepoHash: $(valMsg ${REGEXP_REPO_HASH})";
${_sed} -i.bk "s/${REGEXP_REPO_HASH}/\1${REPO_HASH}\3/" ${VS_VFILE};

# RegExp Pattern: ISO-8601: 2019-01-19 01:00:52 +0800
REGEXP_TMZ="[0-9]{4}"
REGEXP_YMD="[0-9]{4}-[0-9]{2}-[0-9]{2}"
REGEXP_HMS="[0-9]{2}:[0-9]{2}:[0-9]{2}"
REGEXP_DTZ="${REGEXP_YMD}\s+${REGEXP_HMS}\s+\+${REGEXP_TMZ}"
REGEXP_MODIFY_TIME="^(${_VS_MODIFY_TIME_}\s+\\\"*)(${REGEXP_DTZ})(\\\"*\s*.*)$";
debugMsg "$(keyMsg ${VCS}): RegExp: ModifyTime: $(valMsg ${REGEXP_MODIFY_TIME})";
${_sed} -i.bk "s/${REGEXP_MODIFY_TIME}/\1${REPO_MODIFY_TIME}\3/" ${VS_VFILE};

# RegExp Pattern: User Name & Email and build time
REGEXP_BUILD_TIME="^(${_VS_BUILD_TIME_}\s+\\\"*)(${REGEXP_DTZ})(\\\"*\s*.*)$";
REGEXP_BUILD_USER="^(${_VS_BUILD_USER_}\s+\\\"*)([0-9A-Za-z_ \.-]*\s+<[0-9A-Za-z_\.]+@[A-Za-z\.]+>)(\\\"*\s*.*)$";
debugMsg "$(keyMsg ${VCS}): RegExp: BuildUser: $(valMsg ${REGEXP_BUILD_USER})";
debugMsg "$(keyMsg ${VCS}): RegExp: BuildTime: $(valMsg ${REGEXP_BUILD_TIME})";
${_sed} -i.bk "s/${REGEXP_BUILD_USER}/\1${BUILD_USER}\3/" ${VS_VFILE};
${_sed} -i.bk "s/${REGEXP_BUILD_TIME}/\1${BUILD_TIME}\3/" ${VS_VFILE};

# RegExp Pattern: host user, host name, host system name & version
REGEXP_HOST_NAME="^(${_VS_HOST_NAME_}\s+\\\")([0-9A-Za-z_ \.-]+)(\\\"\s*.*)$";
REGEXP_HOST_USER="^(${_VS_HOST_USER_}\s+\\\")([0-9A-Za-z_ \.-]+)(\\\"\s*.*)$";
REGEXP_HOST_OSNV="^(${_VS_HOST_OSNV_}\s+\\\")([0-9A-Za-z_ \.-]+)(\\\"\s*.*)$";
debugMsg "$(keyMsg ${VCS}): RegExp: HostName: $(valMsg ${REGEXP_HOST_NAME})";
debugMsg "$(keyMsg ${VCS}): RegExp: HostUser: $(valMsg ${REGEXP_HOST_USER})";
debugMsg "$(keyMsg ${VCS}): RegExp: HostOsNV: $(valMsg ${REGEXP_HOST_OSNV})";
${_sed} -i.bk "s/${REGEXP_HOST_NAME}/\1${HOST_NAME}\3/" ${VS_VFILE};
${_sed} -i.bk "s/${REGEXP_HOST_USER}/\1${HOST_USER}\3/" ${VS_VFILE};
${_sed} -i.bk "s/${REGEXP_HOST_OSNV}/\1${HOST_OSNV}\3/" ${VS_VFILE};

rm -rf ${VS_VFILE}.bk
