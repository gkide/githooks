#!/usr/bin/env bash

REPO_HOOKS_VERSION="v0.1.1";
# https://github.com/gkide/repo-hooks

# Semantic Version
# https://semver.org/
# Software Release Life Cycle
# https://en.wikipedia.org/wiki/Software_release_life_cycle
#
################################################################
#                       +----------------MUI--------------+    #
#  +-ADT-+              |  +--FIX--+                      |    #
#  |     |              |  |       |                      |    #
#  v     |              v  v       |                      |    #
# pre-* ===> alpha ===> beta ===> rc ===> [release] ===> eol   #
#  ^         |  ^       |  ^       ^          |                #
#  |         |  |       | MUI     FIX         |                #
#  +---MUI---+  +--MUI--+  |       |          |                #
#                          +-------+----------+                #
#                                                              #
# - ADT: Analysis, Design, Testing, ...                        #
# - MUI: Modify User Interfacce, feature changing, fix, ...    #
# - FIX: Bug fix, performance improvement, compatibility, ...  #
################################################################
#
# - pre-*
#   Refers to all activities performed before formal testing, like:
#   requirements analysis, software design, and related inter-testing
#
# - alpha
#   The first phase to begin software testing, normally using of
#   white-box, black-box or gray-box testing techniques, and may
#   not contain all of the features that the final version has.
#   It usually ends with features freeze, indicating that no more
#   features will be added to the software, known as feature complete.
#
# - beta
#   The second phase just following alpha, generally begins when the
#   software is feature complete but likely to contain a number of known
#   or unknown bugs, may have speed or performance issues, crashes or data
#   loss. The beta stage is focus on usability, for reducing impacts to the
#   end-users. The beta version is normally formally first release to user.
#
# - rc
#   The release candidate (RC), is the third phase of software development,
#   with potential to be the final version, which is ready to release unless
#   significant bugs emerge. In this stage, features are complete and stable,
#   tested through one or more beta cycles, no entirely new features will be
#   added. There can still have bug fix, change the documentation and testings.
#
# - eol
#   No longer supported, the release reached the end-of-life.

# Exit the script if any statement returns a non-true return value
set -e
# Show error if used undefined variable
set -u
# Pipe fail if any one of the pipe command failed
set -o pipefail

# Current directory of full path with symbolic link resolved
THIS_DIR="$(realpath ${0%/*})";

# Import normal shell function-util
# - IS_DEBUG_MODE=true;
# - IS_VERBOSE_MODE=true;
source ${THIS_DIR}/utils.sh;
IS_DEBUG_MODE=false;
__SKIP_ALL_MSG=false;

_sed=$([ "$(uname)" = "Darwin" ] && echo "sed -E" || echo "sed -r");

# Interactive mode or not
IS_INTERACTIVE=true;
# Run testing
IS_TESTING=false;

# Semantic version config if not set then use the default
USR_CONFIG="";

for item in $*; do
    if [ "0" = "$#" ]; then
        break;
    fi

    KEY=$(echo ${item} | sed "s/\([a-zA-Z]*\)=\([a-zA-Z0-9\/\._-]*\)/\1/g");
    VAL=$(echo ${item} | sed "s/\([a-zA-Z]*\)=\([a-zA-Z0-9\/\._-]*\)/\2/g");
    # infoMsg "$# [$item] => [$KEY], [$VAL]";

    [ "$KEY" = "" -o "$KEY" = "${item}" ] && break;
    [ "$VAL" = "" -o "$VAL" = "${item}" ] && break;

    if [ "CONFIG" = "$KEY" ]; then
        USR_CONFIG="$VAL";
        continue;
    fi

    if [ "INTERACTIVE" = "$KEY" ]; then
        IS_INTERACTIVE=$VAL;
        continue;
    fi

    if [ "TESTING" = "$KEY" ]; then
        __SKIP_ALL_MSG=true;
        IS_TESTING=true;
        continue;
    fi
done

# If true, utils functions keep quiet
SKIP_ALL_MSG=$__SKIP_ALL_MSG;

# Semantic version config not set, use the default of current working directory
if [ "${USR_CONFIG}" = "" ]; then
    USR_CONFIG=.sync-repo-info.sh
fi

if [ ! -f "${USR_CONFIG}" ]; then
    infoMsg "Usage: ${0##*/} [CONFIG=config] [TESTING=true]";
    errMsg "Release config do not exits $(keyMsg ${PWD}/${USR_CONFIG})";
fi

# User configuration
# - REPO_DIR
# - REPO_VCS
# - VS_VFILE
source ${USR_CONFIG};
USR_CONFIG=$(realpath -s ${USR_CONFIG}); # don't expand symlinks

# Change to user repo directory
if [ ! -d ${REPO_DIR} ]; then
    errMsg "Do not exits repo $(keyMsg ${REPO_DIR})";
fi
cd ${REPO_DIR}
REPO_DIR=$(realpath -s ${REPO_DIR}); # don't expand symlinks

# Checking is GIT or SVN
VCS="$(getSupportedVCS $REPO_VCS)";
[ "${VCS}" = "SVN" -a ! -d ${PWD}/.svn ] \
    && errMsg "Repo is not $(keyMsg SVN)";
[ "${VCS}" = "GIT" -a ! -d ${PWD}/.git ] \
    && errMsg "Repo is not $(keyMsg GIT)";

isGitRepo=false;
isSvnRepo=false;
case "${VCS}" in
    "GIT")
        isGitRepo=true;
        ;;
    "SVN")
        isSvnRepo=true;
        ;;
esac

# Semantic version file to sync
if [ ! -f ${VS_VFILE} ]; then
    errMsg "Do not exits repo info file $(keyMsg ${VS_VFILE})";
fi

# The version & config file should be one file of the repo subdirectory
fullPath=$(realpath -s ${VS_VFILE}); # don't expand symlinks
isRepoFile=${fullPath#${REPO_DIR}/}; # remove '${REPO_DIR}/'
if [ "${isRepoFile}" = "${fullPath}" ]; then
    errMsg "$(keyMsg ${VCS}): $(valMsg ${fullPath}) NOT in the repo
       $(keyMsg ${REPO_DIR})";
fi
VS_VFILE=${REPO_DIR}/${isRepoFile};

fullPath=$(realpath -s ${USR_CONFIG}); # don't expand symlinks
isRepoFile=${fullPath#${REPO_DIR}/}; # remove '${REPO_DIR}/'
if [ "${isRepoFile}" = "${fullPath}" ]; then
    errMsg "$(keyMsg ${VCS}): $(valMsg ${fullPath}) NOT in the repo
       $(keyMsg ${REPO_DIR})";
fi
USR_CONFIG=${REPO_DIR}/${isRepoFile};

REPO_NAME=$(basename ${REPO_DIR});
infoMsg "----------------------------------------------------------------";
infoMsg "Just Enter with nothing will use the default [value]";
infoMsg "----------------------------------------------------------------";
infoMsg "$(keyMsg ${VCS}): Repo Dir: $(valMsg ${REPO_DIR})";
infoMsg "$(keyMsg ${VCS}): Repo Cfg: $(keyMsg ${REPO_NAME})/$(valMsg ${USR_CONFIG#${REPO_DIR}/})";
infoMsg "$(keyMsg ${VCS}): SyncInfo: $(keyMsg ${REPO_NAME})/$(valMsg ${VS_VFILE#${REPO_DIR}/})";

# Software Release Life Cycle
SRLC_REG="(([a-z]+)(-[a-z]+)*)(\.([0-9]+(\.[0-9]+)*))*";
SRLC_CAN="pre alpha beta rc eol"; # CAN: Candidates

SRLC_HELP="";
SRLC_FMTA="";
SRLC_FMTB="";
SRLC_FMTC="";
for item in ${SRLC_CAN}; do
    [ -n "${SRLC_HELP}" ] && SRLC_HELP="${SRLC_HELP}, ";
    SRLC_HELP="${SRLC_HELP}$(valMsg ${item})";

    [ -n "${SRLC_FMTA}" ] && SRLC_FMTA="${SRLC_FMTA}    ";
    [ -n "${SRLC_FMTB}" ] && SRLC_FMTB="${SRLC_FMTB}    ";
    [ -n "${SRLC_FMTC}" ] && SRLC_FMTC="${SRLC_FMTC}    ";
    if [ "${item}" != "eol" ]; then
        SRLC_FMTA="${SRLC_FMTA}${item}.123";
        SRLC_FMTB="${SRLC_FMTB}${item}-foo";
        SRLC_FMTC="${SRLC_FMTC}${item}-X.1";
    fi
done

# The TWEAK example usage
SRLC_HELP="${SRLC_HELP}
The TWEAK format as following, like:
    ${SRLC_FMTA}
    ${SRLC_FMTB}
    ${SRLC_FMTC}";

function escapeRegExpMetaChar()
{
    STR="$1";

    # *         \*
    STR=$(escREMC '*' "$STR");

    # space     \s+
    STR=$(escREMC ' ' "$STR");
    STR=$(escREMC '\t' "$STR");

    # (         \(
    # )         \)
    STR=$(escREMC '(' "$STR");
    STR=$(escREMC ')' "$STR");

    # [         \[
    # ]         \]
    STR=$(escREMC '[' "$STR");
    STR=$(escREMC ']' "$STR");

    printf "${STR}";
    return 0;
}

isDefined="$(echo ${VS_MAJOR-NotDefine})"
if [ "${isDefined}" = "NotDefine" ]; then
    _VS_MAJOR_="XX_YY_ZZ_NOT_USED_MAJOR";
else
    _VS_MAJOR_=$(escapeRegExpMetaChar "${VS_MAJOR}");
    VS_MAJOR=$(escREMC '*' "${VS_MAJOR}");
    VS_MAJOR=$(escREMC '[' "${VS_MAJOR}");
    VS_MAJOR=$(escREMC ']' "${VS_MAJOR}");
    debugMsg "$(keyMsg Key Major): [$(valMsg ${VS_MAJOR})]";
fi

isDefined="$(echo ${VS_MINOR-NotDefine})"
if [ "${isDefined}" = "NotDefine" ]; then
    _VS_MINOR_="XX_YY_ZZ_NOT_USED_MINOR";
else
    _VS_MINOR_=$(escapeRegExpMetaChar "${VS_MINOR}");
    VS_MINOR=$(escREMC '*' "${VS_MINOR}");
    VS_MINOR=$(escREMC '[' "${VS_MINOR}");
    VS_MINOR=$(escREMC ']' "${VS_MINOR}");
    debugMsg "$(keyMsg Key Minor): [$(valMsg ${VS_MINOR})]";

fi

isDefined="$(echo ${VS_PATCH-NotDefine})"
if [ "${isDefined}" = "NotDefine" ]; then
    _VS_PATCH_="XX_YY_ZZ_NOT_USED_PATCH";
else
    _VS_PATCH_=$(escapeRegExpMetaChar "${VS_PATCH}");
    VS_PATCH=$(escREMC '*' "${VS_PATCH}");
    VS_PATCH=$(escREMC '[' "${VS_PATCH}");
    VS_PATCH=$(escREMC ']' "${VS_PATCH}");
    debugMsg "$(keyMsg Key Patch): [$(valMsg ${VS_PATCH})]";
fi

isDefined="$(echo ${VS_TWEAK-NotDefine})"
if [ "${isDefined}" = "NotDefine" ]; then
    _VS_TWEAK_="XX_YY_ZZ_NOT_USED_TWEAK";
else
    _VS_TWEAK_=$(escapeRegExpMetaChar "${VS_TWEAK}");
    VS_TWEAK=$(escREMC '*' "${VS_TWEAK}");
    VS_TWEAK=$(escREMC '[' "${VS_TWEAK}");
    VS_TWEAK=$(escREMC ']' "${VS_TWEAK}");
    debugMsg "$(keyMsg Key Tweak): [$(valMsg ${VS_TWEAK})]";
fi

isDefined="$(echo ${VS_SEMVER-NotDefine})"
if [ "${isDefined}" = "NotDefine" ]; then
    _VS_SEMVER_="XX_YY_ZZ_NOT_USED_SEMVER";
else
    _VS_SEMVER_=$(escapeRegExpMetaChar "${VS_SEMVER}");

    VS_SEMVER=$(escREMC '*' "${VS_SEMVER}");
    VS_SEMVER=$(escREMC '[' "${VS_SEMVER}");
    VS_SEMVER=$(escREMC ']' "${VS_SEMVER}");
    VS_SEMVER=$(escREMC ' ' "$VS_SEMVER");
    VS_SEMVER=$(escREMC '\t' "$VS_SEMVER");
fi

# Version RegExp Pattern
REGEXP_MAJOR="^(${_VS_MAJOR_}\s*\\\"*'*)([0-9]+)('*\\\"*\s*.*)$";
REGEXP_MINOR="^(${_VS_MINOR_}\s*\\\"*'*)([0-9]+)('*\\\"*\s*.*)$";
REGEXP_PATCH="^(${_VS_PATCH_}\s*\\\"*'*)([0-9]+)('*\\\"*\s*.*)$";
REGEXP_TWEAK="^(${_VS_TWEAK_}\s*\\\"*'*)([0-9a-z\.-]+)*('*\\\"*\s*.*)$";
REGEXP_SEMVER="^(${_VS_SEMVER_}\s*\\\"*'*)([A-Za-z0-9\.\+-]+)('*\\\"*\s*.*)$";

debugMsg "$(keyMsg RegExp Major): [$(valMsg ${REGEXP_MAJOR})]";
debugMsg "$(keyMsg RegExp Minor): [$(valMsg ${REGEXP_MINOR})]";
debugMsg "$(keyMsg RegExp Patch): [$(valMsg ${REGEXP_PATCH})]";
debugMsg "$(keyMsg RegExp Tweak): [$(valMsg ${REGEXP_TWEAK})]";
debugMsg "$(keyMsg RegExp SemVer): [$(valMsg ${REGEXP_SEMVER})]";

# Old Semver
if [ "$_VS_SEMVER_" != "XX_YY_ZZ_NOT_USED_SEMVER" ]; then
    VERSION_SEMVER=$(grep "${VS_SEMVER}" ${VS_VFILE} \
        | ${_sed} "s/${REGEXP_SEMVER}/\2/");
    debugMsg "$(keyMsg SemVer): [$(valMsg ${VERSION_SEMVER})]";

    VERSION_MAJOR=$(echo "${VERSION_SEMVER}" \
        | ${_sed} "s/([A-Za-z]*)([0-9]+)\.([0-9]+)\.([0-9]+)([A-Za-z0-9\.\+-]+)*/\2/");
    VERSION_MINOR=$(echo "${VERSION_SEMVER}" \
        | ${_sed} "s/([A-Za-z]*)([0-9]+)\.([0-9]+)\.([0-9]+)([A-Za-z0-9\.\+-]+)*/\3/");
    VERSION_PATCH=$(echo "${VERSION_SEMVER}" \
        | ${_sed} "s/([A-Za-z]*)([0-9]+)\.([0-9]+)\.([0-9]+)([A-Za-z0-9\.\+-]+)*/\4/");
    VERSION_TWEAK=$(echo "${VERSION_SEMVER}" \
        | ${_sed} "s/([A-Za-z]*)([0-9]+)\.([0-9]+)\.([0-9]+)([A-Za-z0-9\.\+-]+)*/\5/");
    VERSION_TWEAK=$(echo "${VERSION_TWEAK}" \
        | awk 'sub(/\-/,"",$1) sub(/\+/,"",$1) { print $1; }');
else
    VERSION_MAJOR=$(grep "${VS_MAJOR}" ${VS_VFILE} \
        | ${_sed} "s/${REGEXP_MAJOR}/\2/");
    VERSION_MINOR=$(grep "${VS_MINOR}" ${VS_VFILE} \
        | ${_sed} "s/${REGEXP_MINOR}/\2/");
    VERSION_PATCH=$(grep "${VS_PATCH}" ${VS_VFILE} \
        | ${_sed} "s/${REGEXP_PATCH}/\2/");
    VERSION_TWEAK=$(grep "${VS_TWEAK}" ${VS_VFILE} \
        | ${_sed} "s/${REGEXP_TWEAK}/\2/");
fi

if [ -z "${VERSION_MAJOR}" -o -z "{$VERSION_MINOR}" -o -z "${VERSION_PATCH}" ]; then
    errMsg "Get semantic version from $(keyMsg ${VS_VFILE}) failed";
fi

# Save the previous version
PREV_MAJOR=${VERSION_MAJOR}
PREV_MINOR=${VERSION_MINOR}
PREV_PATCH=${VERSION_PATCH}
PREV_TWEAK=${VERSION_TWEAK}

_major_="$(valMsg ${VERSION_MAJOR})";
_minor_="$(valMsg ${VERSION_MINOR})";
_patch_="$(valMsg ${VERSION_PATCH})";
_tweak_="$(valMsg ${VERSION_TWEAK})";

# Check release branch for GIT repo
if ${isGitRepo}; then
    CURRENT_BRANCH=$(git status | head -n 1 | awk '{print $3}');
    infoMsg "----------------------------------------------------------------";
    infoMsgL "Release branch $(valMsg ${CURRENT_BRANCH}) (y/n) [y]: ";
    usrInput="Y"; # default value for none interactive mode
    ${IS_TESTING} && usrInput="Y"; # testing & none interactive mode
    ${IS_INTERACTIVE} && read -p "" usrInput;
    [ -z "${usrInput}" ] && usrInput='Y'; # Just Enter is Yes

    if ! isYes "${usrInput}"; then
        errMsg "Release stop.";
    fi
fi

o_major="${_major_}"
o_minor="${_minor_}"
o_patch="${_patch_}"
o_tweak="${_tweak_}"

PREV_TWEAK_TXT="";
PREV_TWEAK_NUM="";
[ -n "${VERSION_TWEAK}" ] && {
    PREV_TWEAK_TXT=$(echo "${VERSION_TWEAK}" | ${_sed} "s/^${SRLC_REG}$/\1/");
    PREV_TWEAK_NUM=$(echo "${VERSION_TWEAK}" | ${_sed} "s/^${SRLC_REG}$/\5/");
    IS_TXT=$(echo "${PREV_TWEAK_TXT}" | ${_sed} -n "/^[a-z]+(-[a-z]+)*$/p");
    IS_NUM=$(echo "${PREV_TWEAK_NUM}" | ${_sed} -n "/^[0-9]+(\.[0-9]+)*$/p");
    if [ -z "${IS_TXT}" -a -z "${IS_NUM}" ]; then
        errMsg "$(keyMsg ${VS_VFILE}) tweak shoule be: ${SRLC_HELP}";
    fi
    [ -z "${IS_TXT}" ] && PREV_TWEAK_TXT="";
    [ -z "${IS_NUM}" ] && PREV_TWEAK_NUM="";
    debugMsg "$(keyMsg Tweak old text): [$(valMsg ${PREV_TWEAK_TXT})]";
    debugMsg "$(keyMsg Tweak old nums): [$(valMsg ${PREV_TWEAK_NUM})]";
}

# Update CHANGELOG.md & get next auto semver
# SEMVER_TAG is like '1.2.3' or '1.2.3-1'
CHANGELOG="CHANGELOG.md";
CHANGELOG_UPDATE=false;
infoMsgL "Update changelog ($(keyMsg SKIP)) [$(valMsg ${CHANGELOG})]: ";
usrInput="CHANGELOG.md"; # default value for none interactive mode
${IS_TESTING} && usrInput="CHANGELOG.md"; # testing & none interactive mode
${IS_INTERACTIVE} && read -p "" usrInput;

# Skip changelog update
if [ "${usrInput}" != "SKIP" ]; then
    CHANGELOG_UPDATE=true;
    [ -n "${usrInput}" ] && CHANGELOG="${usrInput}";

    fullPath=$(realpath -m ${CHANGELOG});
    isRepoFile=${fullPath#${REPO_DIR}/};
    if [ "${isRepoFile}" = "${fullPath}" ]; then
        errMsg "$(valMsg ${fullPath}) NOT in the repo
        $(keyMsg ${REPO_DIR})";
    fi
    CHANGELOG=${isRepoFile}; # Relative path of repo
fi

if [ ! -f "${CHANGELOG}" ]; then
    pathName=$(dirname ${CHANGELOG});
    [ ! -e "${pathName}" ] && mkdir -p ${pathName};
    touch "${CHANGELOG}";
fi

git stash &>/dev/null || true;
SEMVER_TAG=$(standard-release -x -f SKIP -c ${CHANGELOG} 2>/dev/null | head -n 1 \
    | awk -F':' 'gsub(/[ ]/,"",$2) { print $2; }');
[ -n "${SEMVER_TAG}" ] \
    || errMsg "Get auto semver failed, try install npm $(keyMsg standard-release)";
git checkout ${CHANGELOG};
git stash pop &>/dev/null || true;

# Split auto semver into two parts
SEMVER_VAL=$(echo "${SEMVER_TAG}" \
    | awk 'sub(/v/,"",$1) sub(/-/,";",$1) { print $1; }');

AUTO_MMP=$(echo "${SEMVER_VAL}" | awk -F ';' '{ print $1; }');
debugMsg "$(keyMsg Auto major.minor.patch): [$(valMsg ${AUTO_MMP})]";
AUTO_MAJOR=$(echo "${AUTO_MMP}" | awk -F '.' '{ print $1; }');
AUTO_MINOR=$(echo "${AUTO_MMP}" | awk -F '.' '{ print $2; }');
AUTO_PATCH=$(echo "${AUTO_MMP}" | awk -F '.' '{ print $3; }');

AUTO_TWEAK_TXT="";
AUTO_TWEAK_NUM="";
AUTO_PREREL=$(echo "${SEMVER_VAL}" | awk -F ';' '{ print $2; }');
debugMsg "$(keyMsg Auto pre-release): [$(valMsg ${AUTO_PREREL})]";
if [ -n "${AUTO_PREREL}" ]; then
    AUTO_TWEAK_TXT=$(echo "${AUTO_PREREL}" | ${_sed} "s/^${SRLC_REG}$/\1/");
    AUTO_TWEAK_NUM=$(echo "${AUTO_PREREL}" | ${_sed} "s/^${SRLC_REG}$/\5/");
    IS_TXT=$(echo "${AUTO_TWEAK_TXT}" | ${_sed} -n "/^[a-z]+(-[a-z]+)*$/p");
    IS_NUM=$(echo "${AUTO_TWEAK_NUM}" | ${_sed} -n "/^[0-9]+(\.[0-9]+)*$/p");
    if [ -z "${IS_TXT}" -a -z "${IS_NUM}" ]; then
            errMsg "Auto git tag $(keyMsg pre-release) should be: ${SRLC_HELP}";
    fi
    [ -z "${IS_TXT}" ] && AUTO_TWEAK_TXT="";
    [ -z "${IS_NUM}" ] && AUTO_TWEAK_NUM="";
    debugMsg "$(keyMsg Auto tweak text): [$(valMsg ${AUTO_TWEAK_TXT})]";
    debugMsg "$(keyMsg Auto tweak nums): [$(valMsg ${AUTO_TWEAK_NUM})]";
fi

_major_="$(valMsg ${AUTO_MAJOR})";
[ "${PREV_MAJOR}" != "${AUTO_MAJOR}" ] \
    && _major_="$(msgRed ${AUTO_MAJOR})";

_minor_="$(valMsg ${AUTO_MINOR})";
[ "${PREV_MINOR}" != "${AUTO_MINOR}" ] \
    && _minor_="$(msgRed ${AUTO_MINOR})";

_patch_="$(valMsg ${AUTO_PATCH})";
[ "${PREV_PATCH}" != "${AUTO_PATCH}" ] \
    && _patch_="$(msgRed ${AUTO_PATCH})";

_tweak_="$(valMsg ${AUTO_PREREL})";
if [ "${PREV_TWEAK}" != "${AUTO_PREREL}" ]; then
    _tweak_=""; # clean it
    if [ -n "${AUTO_TWEAK_TXT}" ]; then
        _tweak_="$(valMsg ${AUTO_TWEAK_TXT})";
        [ "${PREV_TWEAK_TXT}" != "${AUTO_TWEAK_TXT}" ] \
            && _tweak_="$(msgRed ${AUTO_TWEAK_TXT})";
    fi

    if [ -n "${AUTO_TWEAK_NUM}" ]; then
        if [ "${PREV_TWEAK_NUM}" != "${AUTO_TWEAK_NUM}" ]; then
            _tweak_="${_tweak_}$(msgRed .${AUTO_TWEAK_NUM})";
        else
            _tweak_="${_tweak_}$(valMsg .${AUTO_TWEAK_NUM})";
        fi
    fi
fi

n_major="${_major_}"
n_minor="${_minor_}"
n_patch="${_patch_}"
n_tweak="${_tweak_}"

BUMP_SEMVER=false;
BUMP_SEMVER_BY_USER=true;
infoMsg "----------------------------------------------------------------";
infoMsg "SemVer OLD => Major(${o_major})\tMinor(${o_minor})\tPatch(${o_patch})\tTweak(${o_tweak})";
infoMsg "SemVer NEW => Major(${n_major})\tMinor(${n_minor})\tPatch(${n_patch})\tTweak(${n_tweak})";
infoMsgL "Use NEW Semantic Version (y/n) [y]: ";
usrInput="Y"; # default value for none interactive mode
${IS_TESTING} && usrInput="Y"; # testing & none interactive mode
${IS_INTERACTIVE} && read -p "" usrInput;
[ -z "${usrInput}" ] && usrInput='Y'; # Just Enter is Yes
if isYes "${usrInput}"; then
    BUMP_SEMVER=true;
    BUMP_SEMVER_BY_USER=false;
    VERSION_MAJOR=${AUTO_MAJOR};
    VERSION_MINOR=${AUTO_MINOR};
    VERSION_PATCH=${AUTO_PATCH};

    VERSION_TWEAK=${AUTO_PREREL}; # may be just numbers, no ascii text
    IS_NUM=$(echo "${VERSION_TWEAK}" | ${_sed} -n "/^[0-9]+(\.[0-9]+)*$/p");
    [ -n "${IS_NUM}" ] && VERSION_TWEAK="rc.${VERSION_TWEAK}";
fi

if ${BUMP_SEMVER_BY_USER}; then
    # The final major
    infoMsgL "New SemVer Major [$(valMsg ${VERSION_MAJOR})]: ";
    usrInput=""; # default value for none interactive mode
    ${IS_INTERACTIVE} && read -p "" usrInput;
    case "${usrInput}" in
    "")
        # Just Enter is empty, just use it, no touching
        ;;
    *)
        IS_NUM=$(echo "${usrInput}" | ${_sed} -n "/^[0-9]+$/p");
        [ -z "${IS_NUM}" ] && errMsg "$(keyMsg Major) must be numbers of 0-9.";
        VERSION_MAJOR="${usrInput}";
        BUMP_SEMVER=true;
        ;;
    esac

    # The final minor
    infoMsgL "New SemVer Minor [$(valMsg ${VERSION_MINOR})]: ";
    usrInput=""; # default value for none interactive mode
    ${IS_INTERACTIVE} && read -p "" usrInput;
    case "${usrInput}" in
    "")
        # Just Enter is empty, just use it, no touching
        ;;
    *)
        IS_NUM=$(echo "${usrInput}" | ${_sed} -n "/^[0-9]+$/p");
        [ -z "${IS_NUM}" ] && errMsg "$(keyMsg Minor) must be numbers of 0-9.";
        VERSION_MINOR="${usrInput}";
        BUMP_SEMVER=true;
        ;;
    esac

    # The final patch
    infoMsgL "New SemVer Patch [$(valMsg ${VERSION_PATCH})]: ";
    usrInput=""; # default value for none interactive mode
    ${IS_INTERACTIVE} && read -p "" usrInput;
    case "${usrInput}" in
    "")
        # Just Enter is empty, just use it, no touching
        ;;
    *)
        IS_NUM=$(echo "${usrInput}" | ${_sed} -n "/^[0-9]+$/p");
        [ -z "${IS_NUM}" ] && errMsg "$(keyMsg Patch) must be numbers of 0-9.";
        VERSION_PATCH="${usrInput}";
        BUMP_SEMVER=true;
        ;;
    esac

    # The final tweak
    infoMsgL "New SemVer Tweak ($(keyMsg SKIP)) [$(valMsg ${VERSION_TWEAK})]: ";
    usrInput=""; # default value for none interactive mode
    ${IS_INTERACTIVE} && read -p "" usrInput;
    case "${usrInput}" in
    "")
        # Just Enter is empty, just use it, no touching
        ;;
    "SKIP")
        # Tweak skip, empty the value
        if [ -n "${VERSION_TWEAK}" ]; then
            # Not auto bump, clean ${VS_VFILE} tweak part only
            VERSION_TWEAK="";
            BUMP_SEMVER=true;
        fi
        ;;
    *)
        VERSION_TWEAK="${usrInput}";
        BUMP_SEMVER=true; # new tweak value
        ;;
    esac
fi

VERSION_TWEAK_TXT="";
VERSION_TWEAK_NUM="";

# Checking tweak if not empty
[ -n "${VERSION_TWEAK}" ] && {
    tweakSRLC=$(echo "${VERSION_TWEAK}" | ${_sed} "s/^${SRLC_REG}$/\2/");
    debugMsg "$(keyMsg Final tweak SRLC): [$(valMsg ${tweakSRLC})]";

    IS_OK=false;
    tweakInfo="$(valMsg ${VERSION_TWEAK})";
    for item in ${SRLC_CAN}; do
        [ "${tweakSRLC}" = "${item}" ] && IS_OK=true && break;
    done

    if ! ${IS_OK}; then
        errMsg "$(keyMsg TWEAK)(${tweakInfo}) must be one of: ${SRLC_HELP}";
    fi

    tweak_TXT=$(echo "${VERSION_TWEAK}" | ${_sed} "s/^${SRLC_REG}$/\1/");
    tweak_NUM=$(echo "${VERSION_TWEAK}" | ${_sed} "s/^${SRLC_REG}$/\5/");

    # Checking again because the value may be overwrite from cmd-line
    IS_TXT=$(echo "${tweak_TXT}" | ${_sed} -n "/^[a-z]+(-[a-z]+)*$/p");
    IS_NUM=$(echo "${tweak_NUM}" | ${_sed} -n "/^[0-9]+(\.[0-9]+)*$/p");
    if [ -z "${IS_TXT}" -a -z "${IS_NUM}" ]; then
        errMsg "$(keyMsg TWEAK)(${tweakInfo}) format should be: ${SRLC_HELP}";
    fi

    [ -z "${IS_TXT}" ] && tweak_TXT="";
    [ -z "${IS_NUM}" ] && tweak_NUM="";

    VERSION_TWEAK_TXT="${tweak_TXT}";
    VERSION_TWEAK_NUM="${tweak_NUM}";
    debugMsg "$(keyMsg Final tweak text): [$(valMsg ${tweak_TXT})]";
    debugMsg "$(keyMsg Final tweak nums): [$(valMsg ${tweak_NUM})]";
}

if [ -z "${VERSION_TWEAK}" ]; then
    RELEASE_TAG="v${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_PATCH}"
else
    RELEASE_TAG="v${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_PATCH}-${VERSION_TWEAK}"
fi

{ [ -z "${VERSION_MAJOR}" ] || [ -z "{$VERSION_MINOR}" ] || [ -z "${VERSION_PATCH}" ]; } \
    && errMsg "Release semver($(valMsg ${RELEASE_TAG})) error";

# Check if RELEASE_TAG is valid semver
if ! $(standard-release -x --is-semver "${RELEASE_TAG}"); then
    errMsg "Invalid release semver($(valMsg ${RELEASE_TAG}))";
fi

if ${isGitRepo}; then
    for tag in $(git tag --list); do
        [ "${tag}" = "${RELEASE_TAG}" ] \
            && errMsg "The semver tag $(valMsg ${tag}) already exists";
    done
fi

_major_="$(valMsg ${VERSION_MAJOR})";
[ "${PREV_MAJOR}" != "${VERSION_MAJOR}" ] \
    && _major_="$(msgRed ${VERSION_MAJOR})";

_minor_="$(valMsg ${VERSION_MINOR})";
[ "${PREV_MINOR}" != "${VERSION_MINOR}" ] \
    && _minor_="$(msgRed ${VERSION_MINOR})";

_patch_="$(valMsg ${VERSION_PATCH})";
[ "${PREV_PATCH}" != "${VERSION_PATCH}" ] \
    && _patch_="$(msgRed ${VERSION_PATCH})";

_tweak_="$(valMsg ${VERSION_TWEAK})";
if [ "${PREV_TWEAK}" != "${VERSION_TWEAK}" ]; then
    _tweak_=""; # clean it
    if [ -n "${VERSION_TWEAK_TXT}" ]; then
        _tweak_="$(valMsg ${VERSION_TWEAK_TXT})";
        [ "${PREV_TWEAK_TXT}" != "${VERSION_TWEAK_TXT}" ] \
            && _tweak_="$(msgRed ${VERSION_TWEAK_TXT})";
    fi

    if [ -n "${VERSION_TWEAK_NUM}" ]; then
        if [ "${PREV_TWEAK_NUM}" != "${VERSION_TWEAK_NUM}" ]; then
            _tweak_="${_tweak_}$(msgRed .${VERSION_TWEAK_NUM})";
        else
            _tweak_="${_tweak_}$(valMsg .${VERSION_TWEAK_NUM})";
        fi
    fi
fi

# Make the output pretty look
maxStrLen=$(maxNum ${#PREV_MAJOR} ${#PREV_MINOR} ${#PREV_PATCH} ${#PREV_TWEAK});

indentA="";
strLen=${#PREV_MAJOR};
while [ ${strLen} -le ${maxStrLen} ]; do
  let strLen++;
  indentA="${indentA} ";
done

indentB="";
strLen=${#PREV_MINOR};
while [ ${strLen} -le ${maxStrLen} ]; do
  let strLen++;
  indentB="${indentB} ";
done

indentC="";
strLen=${#PREV_PATCH};
while [ ${strLen} -le ${maxStrLen} ]; do
  let strLen++;
  indentC="${indentC} ";
done

indentD="";
strLen=${#PREV_TWEAK};
while [ ${strLen} -le ${maxStrLen} ]; do
  let strLen=strLen+1;
  indentD="${indentD} ";
done

#debugMsg "$(keyMsg Max length): [$(valMsg ${maxStrLen})]";
#debugMsg "$(keyMsg Major indent): [${indentA}]";
#debugMsg "$(keyMsg Minor indent): [${indentB}]";
#debugMsg "$(keyMsg Patch indent): [${indentC}]";
#debugMsg "$(keyMsg Tweak indent): [${indentD}]";

# The previous latest tag
if ${isGitRepo}; then
    LATEST_TAG=$(git describe --abbrev=0 --tags 2>/dev/null || echo "");
    [ -z "${LATEST_TAG}" ] && LATEST_TAG="init commit";
fi

infoMsg "----------------------------------------------------------------";
infoMsg "Recently tag : $(msgRed ${LATEST_TAG})";
infoMsg "Release  tag : $(valMsg ${RELEASE_TAG})";
infoMsg "Release major: $(valMsg ${PREV_MAJOR})${indentA}=> ${_major_}";
infoMsg "Release minor: $(valMsg ${PREV_MINOR})${indentB}=> ${_minor_}";
infoMsg "Release patch: $(valMsg ${PREV_PATCH})${indentC}=> ${_patch_}";
infoMsg "Release tweak: $(valMsg ${PREV_TWEAK})${indentD}=> ${_tweak_}";

# Update Version
if ${BUMP_SEMVER}; then
    ${_sed} -i.bk "s/${REGEXP_MAJOR}/\1${VERSION_MAJOR}\3/" ${VS_VFILE};
    ${_sed} -i.bk "s/${REGEXP_MINOR}/\1${VERSION_MINOR}\3/" ${VS_VFILE};
    ${_sed} -i.bk "s/${REGEXP_PATCH}/\1${VERSION_PATCH}\3/" ${VS_VFILE};
    ${_sed} -i.bk "s/${REGEXP_TWEAK}/\1${VERSION_TWEAK}\3/" ${VS_VFILE};
    ${_sed} -i.bk "s/${REGEXP_SEMVER}/\1${RELEASE_TAG}\3/" ${VS_VFILE};
    rm ${VS_VFILE}.bk;
fi

infoMsg "----------------------------------------------------------------";
SRA_R=""; # standard-release arguments for changelog release
infoMsgL "Changelog $(keyMsg Release) or $(keyMsg Unreleased) (y/n) [n]: ";
usrInput="N"; # default value for none interactive mode
${IS_TESTING} && usrInput="N"; # testing & none interactive mode
${IS_INTERACTIVE} && read -p "" usrInput;
if isYes "${usrInput}"; then
    SRA_R="-r";
fi

if $CHANGELOG_UPDATE; then
    standard-release -x ${SRA_R} -c ${CHANGELOG} &>/dev/null;
    # Sync CHANGELOG.md release tag to the one really used
    ${_sed} -i.bk "s/${SEMVER_TAG}/${RELEASE_TAG}/g" ${CHANGELOG}
    rm ${CHANGELOG}.bk;
fi

infoMsgL "Show $(valMsg ${CHANGELOG}) diff (y/n) [n]: ";
usrInput="N"; # default value for none interactive mode
${IS_TESTING} && usrInput="N"; # testing & none interactive mode
${IS_INTERACTIVE} && read -p "" usrInput;
if isYes "${usrInput}"; then
    ${isGitRepo} && git diff ${CHANGELOG};
fi

infoMsg "----------------------------------------------------------------";
infoMsgL "Show $(valMsg ${VS_VFILE}) diff (y/n) [n]: ";
usrInput="N"; # default value for none interactive mode
${IS_TESTING} && usrInput="N"; # testing & none interactive mode
${IS_INTERACTIVE} && read -p "" usrInput;
if isYes "${usrInput}"; then
    ${isGitRepo} && git diff ${VS_VFILE};
fi

infoMsg "----------------------------------------------------------------";
infoMsgL "Build the project (Build Command or $(keyMsg SKIP)) [make]: ";
usrInput="make"; # default value for none interactive mode
${IS_TESTING} && usrInput="SKIP"; # testing & none interactive mode
${IS_INTERACTIVE} && read -p "" usrInput;
[ -z "${usrInput}" ] && usrInput='make'; # Just Enter
if [ "${usrInput}" != "SKIP" ]; then
    ${usrInput}; # the project build command
fi

infoMsg "----------------------------------------------------------------";
infoMsgL "Run programme to confirm (Command to run) []: ";
usrInput=""; # default value for none interactive mode
${IS_TESTING} && usrInput=""; # testing & none interactive mode
${IS_INTERACTIVE} && read -p "" usrInput;
if [ -n "${usrInput}" ]; then
    ${usrInput}; # the executable programme to run
fi

# Commit & Tag
TAG_HDR="chore(auto1): tag ${RELEASE_TAG}";
CMT_HDR="chore(auto2): release ${RELEASE_TAG}";
MSG_BDY="

- Detail changes see ${CHANGELOG}
- Building changelog since ${LATEST_TAG}";

TAG_MSG="${TAG_HDR}${MSG_BDY}";
COMMIT_MSG="${CMT_HDR}${MSG_BDY}";

infoMsg "----------------------------------------------------------------";
infoMsg "The message for signed-off commit";
! ${IS_TESTING} && printf "$(msgGreen "${COMMIT_MSG}")\n";

infoMsg "The message for signed annotated tag";
! ${IS_TESTING} && printf "$(msgGreen "${TAG_MSG}")\n";

# Really want to do this
infoMsg "----------------------------------------------------------------";
infoMsgL "Confirm $(valMsg ${VCS}) commit & tag (y/n) [n]: ";
usrInput="N"; # default value for none interactive mode
${IS_TESTING} && usrInput="Y"; # testing & none interactive mode
${IS_INTERACTIVE} && read -p "" usrInput;
if isNo "${usrInput}"; then
    errMsg "Release stop, confirm with $(keyMsg y) or $(keyMsg Y)";
fi

if isYes "${usrInput}"; then
    if ${isGitRepo}; then
        git add ${VS_VFILE};  # Update version
        git add ${CHANGELOG}; # Update changelog

        if ${IS_TESTING}; then
            git commit -m "${COMMIT_MSG}" &>/dev/null;
            git tag -a "${RELEASE_TAG}" -m "${TAG_MSG}" &>/dev/null;
        else
            git commit --signoff -m "${COMMIT_MSG}";
            git tag --sign -a "${RELEASE_TAG}" -m "${TAG_MSG}";
        fi
    fi
fi

infoMsg "################";
infoMsg "# Release Done #";
infoMsg "################";
